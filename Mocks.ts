export const Mocks = {
  getMockThread: (overrides: Partial<GoogleAppsScript.Gmail.GmailThread>): GoogleAppsScript.Gmail.GmailThread => ({
    ...{
      getId: () => 'thread-id',
      getFirstMessageSubject: () => 'Test Subject',
      getMessages: () => [],
      removeLabel: () => {},
      addLabel: () => {},
      moveToArchive: () => {},
      moveToInbox: () => {},
      moveToTrash: () => {},
      markRead: () => {},
      markUnread: () => {},
    },
    ...overrides,
  }),
  getMockMessage: (overrides: Partial<GoogleAppsScript.Gmail.GmailMessage>): GoogleAppsScript.Gmail.GmailMessage => ({
    ...{
      getDate: () => new Date(),
      getFrom: () => 'test@example.com',
      getTo: () => 'test@example.com',
      getSubject: () => 'Test Subject',
      getPlainBody: () => 'Test Body',
    },
    ...overrides,
  }),
  getMockSheet: (data: any[][]): GoogleAppsScript.Spreadsheet.Sheet => ({
    getDataRange: () => ({
      getValues: () => data,
      getDisplayValues: () => data,
    }),
  }),
  getMockSpreadsheet: (sheets: { [key: string]: GoogleAppsScript.Spreadsheet.Sheet }): GoogleAppsScript.Spreadsheet.Spreadsheet => ({
    getSheetByName: (name: string) => sheets[name],
    addDeveloperMetadata: () => {},
    addEditor: () => {},
    addEditors: () => {},
    addMenu: () => {},
    addViewer: () => {},
    addViewers: () => {},
    appendRow: () => {},
    copy: () => ({} as any),
    createDeveloperMetadataFinder: () => ({} as any),
    deleteActiveSheet: () => {},
    deleteColumn: () => {},
    deleteColumns: () => {},
    deleteRow: () => {},
    deleteRows: () => {},
    deleteSheet: () => {},
    duplicateActiveSheet: () => ({} as any),
    getActiveCell: () => ({} as any),
    getActiveRange: () => ({} as any),
    getActiveSheet: () => ({} as any),
    getBandings: () => [],
    getBlob: () => ({} as any),
    getColumnWidth: () => 0,
    getConditionalFormatRules: () => [],
    getDataRange: () => ({} as any),
    getDeveloperMetadata: () => [],
    getEditors: () => [],
    getFormUrl: () => '',
    getFrozenColumns: () => 0,
    getFrozenRows: () => 0,
    getId: () => '',
    getImages: () => [],
    getLastColumn: () => 0,
    getLastRow: () => 0,
    getName: () => '',
    getNumSheets: () => 0,
    getOwner: () => ({} as any),
    getPredefinedSpreadsheetThemes: () => [],
    getProtections: () => [],
    getRange: () => ({} as any),
    getRangeByName: () => ({} as any),
    getRowHeight: () => 0,
    getSheets: () => [],
    getSpreadsheetTheme: () => ({} as any),
    getSpreadsheetUrl: () => '',
    getTimeZone: () => '',
    getToken: () => '',
    getUrl: () => '',
    getViewers: () => [],
    hideSheet: () => {},
    insertColumnAfter: () => {},
    insertColumnBefore: () => {},
    insertColumnsAfter: () => {},
    insertColumnsBefore: () => {},
    insertImage: () => ({} as any),
    insertRowAfter: () => {},
    insertRowBefore: () => {},
    insertRowsAfter: () => {},
    insertRowsBefore: () => {},
    insertSheet: () => ({} as any),
    moveActiveSheet: () => {},
    moveChartToObjectSheet: () => ({} as any),
    removeEditor: () => {},
    removeMenu: () => {},
    removeNamedRange: () => {},
    removeViewer: () => {},
    rename: () => {},
    renameActiveSheet: () => {},
    resetSpreadsheetTheme: () => {},
    setActiveRange: () => ({} as any),
    setActiveSheet: () => ({} as any),
    setActiveSpreadsheet: () => {},
    setColumnWidth: () => {},
    setConditionalFormatRules: () => {},
    setFrozenColumns: () => {},
    setFrozenRows: () => {},
    setNamedRange: () => {},
    setRowHeight: () => {},
    setSpreadsheetTheme: () => {},
    setTimeZone: () => {},
    show: () => {},
    sort: () => {},
    toast: () => {},
    unhide: () => {},
    updateMenu: () => {},
    autoResizeColumn: () => {},
    createTextFinder: () => ({} as any),
    getActiveRangeList: () => ({} as any),
    getAs: () => ({} as any),
    getNamedRanges: () => [],
    getRangeList: () => ({} as any),
    getSheetId: () => 0,
    getSheetValues: () => [[]],
    getSlicer: () => ({} as any),
    getSlicers: () => [],
    getSupportedThemes: () => [],
    hideColumn: () => {},
    hideRow: () => {},
    insertChart: () => ({} as any),
    insertColumns: () => {},
    insertFilter: () => ({} as any),
    insertImageWithDescription: () => ({} as any),
    insertImageWithUrl: () => ({} as any),
    insertPivotTable: () => ({} as any),
    insertSlicer: () => ({} as any),
    isColumnHiddenByUser: () => false,
    isRowHiddenByFilter: () => false,
    isRowHiddenByUser: () => false,
    moveColumns: () => {},
    moveRows: () => {},
    protect: () => ({} as any),
    removeFilter: () => {},
    removeSlicer: () => {},
    setColumnWidths: () => {},
    setRowHeights: () => {},
    showColumn: () => {},
    showRow: () => {},
    unhideColumn: () => {},
    unhideRow: () => {},
    getCurrentCell: () => ({} as any),
    getDataSourceTables: () => [],
    getIterativeCalculationConvergenceThreshold: () => 0,
    getMaxIterativeCalculationCycles: () => 0,
    getRecalculationInterval: () => '',
    getSpreadsheetLocale: () => '',
    isIterativeCalculationEnabled: () => false,
    moveChartToObject: () => {},
    setIterativeCalculationConvergenceThreshold: () => {},
    setMaxIterativeCalculationCycles: () => {},
    setRecalculationInterval: () => {},
    setSpreadsheetLocale: () => {},
  }),
  getMockUrlFetchResponse: (code: number, content: string): GoogleAppsScript.URL_Fetch.HTTPResponse => ({
    getResponseCode: () => code,
    getContentText: () => content,
    getAllHeaders: () => ({}),
    getAs: () => ({} as any),
    getBlob: () => ({} as any),
    getContent: () => [],
    getHeaders: () => ({}),
  }),
  getMockTask: (overrides: Partial<GoogleAppsScript.Tasks.Schema.Task>): GoogleAppsScript.Tasks.Schema.Task => ({
    ...{
      id: 'task-id',
      title: 'Test Task',
      notes: 'gmail_thread_id: thread-id',
      completed: null,
      due: null,
      hidden: false,
      parent: null,
      position: '0',
      status: 'needsAction',
      links: [],
      selfLink: '',
      updated: '',
    },
    ...overrides,
  }),
  getMockTaskList: (overrides: Partial<GoogleAppsScript.Tasks.Schema.TaskList>): GoogleAppsScript.Tasks.Schema.TaskList => ({
    ...{
      id: 'task-list-id',
      title: 'Test Task List',
      selfLink: '',
      updated: '',
    },
    ...overrides,
  }),
};
